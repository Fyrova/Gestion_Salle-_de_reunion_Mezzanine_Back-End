Plan détaillé pour l'implémentation complète des réservations personnalisables et récurrentes

Backend :
1. Modèle de données :
   - Ajouter un champ `recurrenceRule` (String) dans l'entité `Reservation` pour stocker la règle de récurrence (ex : format iCal RRULE).
   - Ajouter un champ `parentReservation` (auto-référentiel ManyToOne) pour lier les occurrences à une réservation principale.
   - Ajouter un champ `recurrenceId` unique pour identifier une série récurrente (optionnel).

2. Gestion des occurrences :
   - Implémenter un parseur de règles de récurrence (ex : iCal RRULE) pour générer les dates des occurrences.
   - Générer les occurrences lors de la création d'une réservation récurrente.
   - Permettre la modification ou l'annulation d'une occurrence individuelle ou de toute la série.
   - Gérer les exceptions (occurrences modifiées ou annulées individuellement).

3. API :
   - Étendre les endpoints de création, mise à jour et suppression pour gérer les réservations récurrentes.
   - Ajouter des paramètres pour spécifier si l'action concerne une occurrence unique, une série complète, ou une partie de la série.

4. Validation :
   - Adapter la validation des conflits de créneaux pour prendre en compte les occurrences récurrentes.

5. Notifications :
   - Adapter le système d'envoi d'emails pour gérer les notifications liées aux séries et occurrences individuelles.

Frontend :
1. Interface utilisateur :
   - Ajouter des options dans le formulaire de création/modification pour définir la récurrence (type, fréquence, jours spécifiques, etc.).
   - Afficher clairement les séries récurrentes et leurs occurrences dans les listes et calendriers.

2. Gestion des actions :
   - Permettre à l'utilisateur de modifier ou annuler une occurrence unique, une série complète, ou une partie de la série via l'interface.
   - Gérer les interactions et confirmations nécessaires pour ces actions.

3. Synchronisation avec le backend :
   - Adapter les appels API pour envoyer les informations de récurrence et les paramètres d'action.
   - Gérer l'affichage des erreurs et confirmations liées aux opérations sur les séries récurrentes.

Tests :
- Tester la création, modification, annulation des réservations simples et récurrentes.
- Tester la gestion des conflits de créneaux.
- Tester l'envoi des notifications.
- Tester les cas limites et erreurs.

Souhaitez-vous que je commence l'implémentation détaillée de ces étapes ?
